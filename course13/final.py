# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dS9nGPfhGTfcM4S5rIpQEcBuIfuYbO2I

## Final Exam
"""

!pip install -r requirements.txt

"""# Set universal line numbers for debugging"""

# Initialize global line counter (run this first)
#if 'GLOBAL_LINE_START' not in globals():
GLOBAL_LINE_START = 30

def start_cell():
    """Call at the start of each cell to get starting line number"""
    global GLOBAL_LINE_START
    print(f"üìç Cell starts at global line: {GLOBAL_LINE_START}")
    return GLOBAL_LINE_START

def end_cell(lines_in_cell):
    """Call at end of cell with number of lines to update global counter"""
    global GLOBAL_LINE_START
    GLOBAL_LINE_START += lines_in_cell
    print(f"üìç Next cell will start at global line: {GLOBAL_LINE_START}")

def show_line(offset=0):
    """Show current global line number"""
    import inspect
    frame = inspect.currentframe()
    local_line = frame.f_back.f_lineno
    global_line = GLOBAL_LINE_START + local_line - 1 + offset
    print(f"üéØ Global line {global_line} (cell line {local_line})")
    return global_line

def reset_counter():
    """Reset the global line counter"""
    global GLOBAL_LINE_START
    GLOBAL_LINE_START = 1
    print("üîÑ Line counter reset to 1")

"""# Import Libraries"""

start_cell()
# get keys and set them for use
import os
from getpass import getpass
from google.colab import userdata

ibm_api_key = userdata.get('IBM_API_KEY')
ibm_project_id = userdata.get('IBM_PROJECT_ID')
watsonx_apikey = userdata.get('WATSONX_APIKEY')

if not ibm_api_key or not ibm_project_id:
  ibm_api_key = getpass('Please enter your IBM Watsonx API key (hit enter when done): ')
else:
  os.environ['IBM_API_KEY']    = ibm_api_key
  os.environ['IBM_PROJECT_ID'] = ibm_project_id
  os.environ['WATSONX_APIKEY'] = watsonx_apikey

print("Set Keys")
end_cell(show_line())

start_cell()
from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA
import gradio as gr
# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')
end_cell(show_line())

"""# Initialize the LLM"""

start_cell()
## LLM
def get_llm():
    model_id = 'mistralai/mixtral-8x7b-instruct-v01'
    parameters = {
        GenParams.MAX_NEW_TOKENS: 256,
        GenParams.TEMPERATURE: 0.5,
    }
#    project_id = "skills-network"
    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url="https://us-south.ml.cloud.ibm.com",
        project_id=ibm_project_id,
        apikey=ibm_api_key,
        params=parameters,
    )
    return watsonx_llm

# lets test this cell
# my_test_llm = get_llm()
# print(my_test_llm)
# and track our line numbers
end_cell(show_line())

"""# Define the PDF document loader"""

start_cell()
## Document loader
def document_loader(file):
    loader = PyPDFLoader(file.name)
    loaded_document = loader.load()
    return loaded_document
end_cell(show_line())

"""# Define the text splitter"""

start_cell()
## Text splitter
def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=50,
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks
end_cell(show_line())

"""# Define the vector store"""

start_cell()
## Vector db
def vector_database(chunks):
    embedding_model = watsonx_embedding()
    vectordb = Chroma.from_documents(chunks, embedding_model)
    return vectordb
end_cell(show_line())

"""# Define the embedding model"""

start_cell()
## Embedding model
def watsonx_embedding():
    embed_params = {
        EmbedTextParamsMetaNames.TRUNCATE_INPUT_TOKENS: 3,
        EmbedTextParamsMetaNames.RETURN_OPTIONS: {"input_text": True},
    }
    watsonx_embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        url="https://us-south.ml.cloud.ibm.com",
        project_id=ibm_project_id,
        params=embed_params,
    )
    return watsonx_embedding
end_cell(show_line())

"""# Define the retriever"""

start_cell()
## Retriever
def retriever(file):
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vectordb = vector_database(chunks)
    retriever = vectordb.as_retriever()
    return retriever
end_cell(show_line())

"""# Define a question-answering chain"""

start_cell()
## QA Chain
def retriever_qa(file, query):
    llm = get_llm()
    print(f"file = {file}, query={query}")
    retriever_obj = retriever(file)
    print(f"retriever_obj = {retriever_obj}")
    qa = RetrievalQA.from_chain_type(llm=llm,
                                    chain_type="stuff",
                                    retriever=retriever_obj,
                                    return_source_documents=False)
    print(f"qa = {qa}")
    response = qa(query)
    print(f"response = {response}")
    return response['result']
end_cell(show_line())

"""# Set up the Gradio interface"""

start_cell()
# Create Gradio interface
rag_application = gr.Interface(
    fn=retriever_qa,
    allow_flagging="never",
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),  # Drag and drop file upload
        gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="Output"),
    title="RAG Chatbot",
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the provided document."
)
end_cell(show_line())

"""# Add code to launch the application"""

start_cell()
# Launch the app
rag_application.launch(server_name="0.0.0.0", server_port= 7860, debug=True)
end_cell(show_line())